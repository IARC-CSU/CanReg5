/**
 * CanReg5 - a tool to input, store, check and analyse cancer registry data.
 * Copyright (C) 2008-2015  International Agency for Research on Cancer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Morten Johannes Ervik, CSU/IARC, ervikm@iarc.fr
 */

/*
 * LoginInternalFrame.java
 *
 * Created on 02 April 2008, 16:36
 */
package canreg.client.gui;

import canreg.client.CanRegClientApp;
import canreg.client.LocalSettings;
import canreg.client.ServerDescription;
import canreg.client.gui.tools.WaitFrame;
import canreg.client.gui.tools.globalpopup.MyPopUpMenu;
import canreg.common.Globals;
import canreg.exceptions.WrongCanRegVersionException;
import java.awt.Cursor;
import java.beans.PropertyChangeSupport;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.security.auth.login.LoginException;
import javax.swing.*;

import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.Task;

/**
 *
 * @author  morten
 */
public final class LoginInternalFrame extends javax.swing.JInternalFrame {

    private static boolean debug = true;
    private javax.swing.JLabel externalFeedbackLabel;
    private FrameView fv;
    private JDesktopPane desktopPane;
    private LocalSettings localSettings;
    String canRegSystemName;
    /**
     * 
     */
    protected final PropertyChangeSupport propertyChangeSupport;

    /** Creates new form LoginInternalFrame
     * @param fv 
     * @param dtp
     */
    public LoginInternalFrame(FrameView fv, JDesktopPane dtp) {
        localSettings = CanRegClientApp.getApplication().getLocalSettings();
        this.desktopPane = dtp;
        this.fv = fv;
        propertyChangeSupport = new PropertyChangeSupport(this);
        initComponents();
        loadDefaultValues();
        if (autoStartCheckBox.isSelected()) {
            Task task = launchCanRegServerAction();
            task.execute();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        feedbackLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        systemPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        canRegSystemComboBox = new javax.swing.JComboBox();
        usernameLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        rememberPasswordCheckBox = new javax.swing.JCheckBox();
        settingsPanel = new javax.swing.JPanel();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        serverURLTextField = new javax.swing.JTextField();
        serverURLLabel = new javax.swing.JLabel();
        addServerToListButton = new javax.swing.JButton();
        advancedPanel = new javax.swing.JPanel();
        autoStartCheckBox = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        portField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        singleUserCheckBox = new javax.swing.JCheckBox();
        advancedCheckBox = new javax.swing.JCheckBox();
        launchServerButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();

        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getResourceMap(LoginInternalFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getActionMap(LoginInternalFrame.class, this);
        loginButton.setAction(actionMap.get("loginAction")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N

        cancelButton.setAction(actionMap.get("cancelAction")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        feedbackLabel.setText(resourceMap.getString("feedbackLabel.text")); // NOI18N
        feedbackLabel.setName("feedbackLabel"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        systemPanel.setName("systemPanel"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        canRegSystemComboBox.setAction(actionMap.get("serverComboboxChanged")); // NOI18N
        canRegSystemComboBox.setName("canRegSystemComboBox"); // NOI18N

        usernameLabel.setText(resourceMap.getString("usernameLabel.text")); // NOI18N
        usernameLabel.setName("usernameLabel"); // NOI18N

        usernameTextField.setText(resourceMap.getString("usernameTextField.text")); // NOI18N
        usernameTextField.setToolTipText(resourceMap.getString("usernameTextField.toolTipText")); // NOI18N
        usernameTextField.setName("usernameTextField"); // NOI18N
        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyTyped(evt);
            }
        });

        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setToolTipText(resourceMap.getString("passwordField.toolTipText")); // NOI18N
        passwordField.setName("passwordField"); // NOI18N
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                enterKeyTyped(evt);
            }
        });

        rememberPasswordCheckBox.setText(resourceMap.getString("rememberPasswordCheckBox.text")); // NOI18N
        rememberPasswordCheckBox.setToolTipText(resourceMap.getString("rememberPasswordCheckBox.toolTipText")); // NOI18N
        rememberPasswordCheckBox.setName("rememberPasswordCheckBox"); // NOI18N

        javax.swing.GroupLayout systemPanelLayout = new javax.swing.GroupLayout(systemPanel);
        systemPanel.setLayout(systemPanelLayout);
        systemPanelLayout.setHorizontalGroup(
            systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLabel)
                    .addComponent(passwordLabel)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10)
                .addGroup(systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canRegSystemComboBox, 0, 463, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemPanelLayout.createSequentialGroup()
                        .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rememberPasswordCheckBox))
                    .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
                .addContainerGap())
        );
        systemPanelLayout.setVerticalGroup(
            systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemPanelLayout.createSequentialGroup()
                .addGroup(systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(canRegSystemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(rememberPasswordCheckBox)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("systemPanel.TabConstraints.tabTitle"), systemPanel); // NOI18N

        settingsPanel.setName("settingsPanel"); // NOI18N

        nameTextField.setEditable(false);
        nameTextField.setText(resourceMap.getString("nameTextField.text")); // NOI18N
        nameTextField.setName("nameTextField"); // NOI18N

        nameLabel.setText(resourceMap.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N

        serverURLTextField.setText(resourceMap.getString("serverURLTextField.text")); // NOI18N
        serverURLTextField.setName("serverURLTextField"); // NOI18N
        serverURLTextField.setNextFocusableComponent(portField);
        serverURLTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                serverURLTextFieldMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                serverURLTextFieldMouseReleased(evt);
            }
        });
        serverURLTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                enterKeyTyped(evt);
            }
        });

        serverURLLabel.setText(resourceMap.getString("serverURLLabel.text")); // NOI18N
        serverURLLabel.setName("serverURLLabel"); // NOI18N

        addServerToListButton.setAction(actionMap.get("addServerToList")); // NOI18N
        addServerToListButton.setName("addServerToListButton"); // NOI18N

        advancedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("advancedPanel.border.title"))); // NOI18N
        advancedPanel.setName("advancedPanel"); // NOI18N

        autoStartCheckBox.setAction(actionMap.get("autoLaunchServerToggled")); // NOI18N
        autoStartCheckBox.setText(resourceMap.getString("autoStartCheckBox.text")); // NOI18N
        autoStartCheckBox.setName("autoStartCheckBox"); // NOI18N

        jButton2.setAction(actionMap.get("testServerConnection")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jButton1.setAction(actionMap.get("getIPaddressAction")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        portField.setText(resourceMap.getString("portField.text")); // NOI18N
        portField.setName("portField"); // NOI18N

        portLabel.setText(resourceMap.getString("portLabel.text")); // NOI18N
        portLabel.setName("portLabel"); // NOI18N

        singleUserCheckBox.setAction(actionMap.get("singleUserModeToggledAction")); // NOI18N
        singleUserCheckBox.setText(resourceMap.getString("singleUserCheckBox.text")); // NOI18N
        singleUserCheckBox.setToolTipText(resourceMap.getString("singleUserCheckBox.toolTipText")); // NOI18N
        singleUserCheckBox.setName("singleUserCheckBox"); // NOI18N

        javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);
        advancedPanel.setLayout(advancedPanelLayout);
        advancedPanelLayout.setHorizontalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleUserCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addComponent(autoStartCheckBox)
                    .addGroup(advancedPanelLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portField, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)))
                .addContainerGap())
        );
        advancedPanelLayout.setVerticalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoStartCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleUserCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        advancedCheckBox.setAction(actionMap.get("changeShowAdvancedAction")); // NOI18N
        advancedCheckBox.setName("advancedCheckBox"); // NOI18N

        launchServerButton.setAction(actionMap.get("launchCanRegServerAction")); // NOI18N
        launchServerButton.setName("launchServerButton"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        codeField.setText(resourceMap.getString("codeField.text")); // NOI18N
        codeField.setName("codeField"); // NOI18N
        codeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codeFieldFocusGained(evt);
            }
        });
        codeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                enterKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(advancedPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serverURLLabel)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(serverURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    //<ictl.co> .addComponent(codeField, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                                    .addComponent(codeField, GroupLayout.PREFERRED_SIZE, 150, Short.MAX_VALUE))
                            .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(advancedCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                        .addComponent(launchServerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addServerToListButton)))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverURLLabel)
                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addServerToListButton)
                    .addComponent(advancedCheckBox)
                    .addComponent(launchServerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advancedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("settingsPanel.TabConstraints.tabTitle"), settingsPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(feedbackLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginButton)
                    .addComponent(cancelButton)
                    .addComponent(feedbackLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDefaultValues() {
        portField.setText("" + Globals.DEFAULT_PORT);
        serverURLTextField.setText(Globals.DEFAULT_SERVER_ADDRESS);
        // Properties p = localSettings.getProperties();
        String rememberPasswordBooleanString = localSettings.getProperty(LocalSettings.REMEMBER_PASSWORD_KEY);
        boolean rememberPassword = rememberPasswordBooleanString.equalsIgnoreCase(LocalSettings.TRUE_PROPERTY);
        rememberPasswordCheckBox.setSelected(rememberPassword);
        if (rememberPassword) {
            passwordField.setText(localSettings.getProperty(LocalSettings.PASSWORD_KEY));
        }
        usernameTextField.setText(localSettings.getProperty(LocalSettings.USERNAME_KEY));
        // Load the server list
        String[] serverNames = localSettings.getServerNames();
        if (serverNames != null) {
            canRegSystemComboBox.setModel(new javax.swing.DefaultComboBoxModel(localSettings.getServerDescriptions().toArray()));
            String lastServerIDString = localSettings.getProperty(LocalSettings.LAST_SERVER_ID_KEY);
            if (lastServerIDString != null && lastServerIDString.trim().length() > 0) {
                ServerDescription sd = localSettings.getServerDescription(Integer.parseInt(lastServerIDString));
                if (sd != null) {
                    canRegSystemComboBox.setSelectedItem(sd);
                    portField.setText(Integer.toString(sd.getPort()));
                    serverURLTextField.setText(sd.getUrl());
                    codeField.setText(sd.getCode());
                }
                canRegSystemComboBox.setSelectedItem(sd);
            }
        } else {
            canRegSystemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        }
        String autoStartServerBooleanString = localSettings.getProperty(LocalSettings.AUTO_START_SERVER_KEY);
        if (autoStartServerBooleanString != null) {
            boolean autoStartServerBoolean = autoStartServerBooleanString.equalsIgnoreCase(LocalSettings.TRUE_PROPERTY);
            autoStartCheckBox.setSelected(autoStartServerBoolean);
        } else {
            autoStartCheckBox.setSelected(false);
        }
        String singleUserBooleanString = localSettings.getProperty(LocalSettings.SINGLE_USER_MODE_KEY);
        if (singleUserBooleanString != null) {
            boolean autoStartServerBoolean = singleUserBooleanString.equalsIgnoreCase(LocalSettings.TRUE_PROPERTY);
            singleUserCheckBox.setSelected(autoStartServerBoolean);
        } else {
            singleUserCheckBox.setSelected(false);
        }
        // Advanced 
        advancedPanel.setVisible(false);
    }

    private void saveDefaultValues() {
        // Properties p = localSettings.getProperties();
        // Should CanReg remember the password?
        if (rememberPasswordCheckBox.isSelected()) {
            localSettings.setProperty(LocalSettings.REMEMBER_PASSWORD_KEY, LocalSettings.TRUE_PROPERTY);
            localSettings.setProperty(LocalSettings.PASSWORD_KEY, new String(passwordField.getPassword()));
        } else {
            localSettings.setProperty(LocalSettings.REMEMBER_PASSWORD_KEY, LocalSettings.FALSE_PROPERTY);
            localSettings.setProperty(LocalSettings.PASSWORD_KEY, "");
        }
        localSettings.setProperty(LocalSettings.USERNAME_KEY, usernameTextField.getText());
        // Get list of servers stored locally
        LinkedList<ServerDescription> sds = localSettings.getServerDescriptions();
        // If this list contains more than one entry - save it.
        if (sds.size() > 0) {
            ServerDescription sd = sds.get(canRegSystemComboBox.getSelectedIndex());
            localSettings.setProperty(LocalSettings.LAST_SERVER_ID_KEY, sd.getId() + "");
        }
        // Should one autostart the CanReg server the next time?
        if (autoStartCheckBox.isSelected()) {
            localSettings.setProperty(LocalSettings.AUTO_START_SERVER_KEY, LocalSettings.TRUE_PROPERTY);
        } else {
            localSettings.setProperty(LocalSettings.AUTO_START_SERVER_KEY, LocalSettings.FALSE_PROPERTY);
        }
        // Should one log in to the server in local only mode?
        if (singleUserCheckBox.isSelected()) {
            localSettings.setProperty(LocalSettings.SINGLE_USER_MODE_KEY, LocalSettings.TRUE_PROPERTY);
        } else {
            localSettings.setProperty(LocalSettings.SINGLE_USER_MODE_KEY, LocalSettings.FALSE_PROPERTY);
        }
        localSettings.writeSettings();
    }

    private void enterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterKeyTyped
        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER) {
            loginAction();
        }
}//GEN-LAST:event_enterKeyTyped

    private void usernameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldKeyTyped

    private void serverURLTextFieldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverURLTextFieldMouseReleased
        MyPopUpMenu.potentiallyShowPopUpMenuTextComponent(serverURLTextField, evt);
    }//GEN-LAST:event_serverURLTextFieldMouseReleased

    private void serverURLTextFieldMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverURLTextFieldMousePressed
        MyPopUpMenu.potentiallyShowPopUpMenuTextComponent(serverURLTextField, evt);
    }//GEN-LAST:event_serverURLTextFieldMousePressed

    private void codeFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codeFieldFocusGained
        launchServerButton.setEnabled(true);
        singleUserCheckBox.setEnabled(true);
    }//GEN-LAST:event_codeFieldFocusGained

    /**
     * 
     */
    @Action
    public void loginAction() {
        saveDefaultValues();
        Task task = logontoCanRegServerAction();
        task.execute();
    }

    protected void loggedIn(String canRegSystemName, String server, String username) {
        fv.getFrame().setTitle("CanReg5 - " + canRegSystemName);
        this.dispose();
        JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SUCCESSFULLY_LOGGED_IN_TO_") + " " + canRegSystemName + " " + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_AS_") + " " + username + ".", java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("LOGGED_IN"), JOptionPane.INFORMATION_MESSAGE);
        // test backup
        if (LocalSettings.TRUE_PROPERTY.equalsIgnoreCase(localSettings.getProperty(LocalSettings.AUTO_BACKUP_KEY))) {
            String maxDiffString = localSettings.getProperty(LocalSettings.BACKUP_EVERY_KEY);
            Date date = null;
            try {
                date = CanRegClientApp.getApplication().getDateOfLastBackUp();
            } catch (SecurityException ex) {
                Logger.getLogger(LoginInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(LoginInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (maxDiffString != null) {
                if (date != null) {
                    int maxDiff = Integer.parseInt(maxDiffString);
                    Date todaysDate = new Date();
                    int diff = (int) ((todaysDate.getTime() - date.getTime()) / (1000L * 60L * 60L * 24L));
                    if (diff >= maxDiff) {
                        int showInternalConfirmDialog = JOptionPane.showInternalConfirmDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(),
                                java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("LAST_BACKUP_WAS_PERFORMED_")
                                + diff
                                + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_DAY(S)_AGO.")
                                + "\n"
                                + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("PERFORM_BACKUP_NOW?"),
                                java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("BACK_UP?"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                        if (showInternalConfirmDialog == JOptionPane.YES_OPTION) {
                            Task backupTask = new PerformBackUpActionTask(org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class));
                            backupTask.execute();
                        }
                    }
                } else {
                    int showInternalConfirmDialog = JOptionPane.showInternalConfirmDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("YOU_HAVE_NEVER_BACKED_UP_YOUR_DATABASE.") + "\n" + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("PERFORM_BACKUP_NOW?"), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("BACK_UP?"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    if (showInternalConfirmDialog == JOptionPane.YES_OPTION) {
                        Task backupTask = new PerformBackUpActionTask(org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class));
                        backupTask.execute();
                    }
                }
            }
        }
    }

    /**
     * 
     */
    @Action
    public void cancelAction() {
        this.dispose();
    }

    /**
     * 
     * @param label
     */
    public void setFeedbackLabel(javax.swing.JLabel label) {
        this.externalFeedbackLabel = label;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addServerToListButton;
    private javax.swing.JCheckBox advancedCheckBox;
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JCheckBox autoStartCheckBox;
    private javax.swing.JComboBox canRegSystemComboBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField codeField;
    private javax.swing.JLabel feedbackLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton launchServerButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JCheckBox rememberPasswordCheckBox;
    private javax.swing.JLabel serverURLLabel;
    private javax.swing.JTextField serverURLTextField;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JCheckBox singleUserCheckBox;
    private javax.swing.JPanel systemPanel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * Simple console trace to system.out for debug purposes only.
     *
     * @param msg the message to be printed to the console
     */
    private static void debugOut(String msg) {
        if (debug) {
            Logger.getLogger(LoginInternalFrame.class.getName()).log(Level.INFO, msg);
        }
    }

    /**
     * 
     * @return
     */
    @Action()
    public Task launchCanRegServerAction() {
        return new LaunchCanRegServerActionTask(org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class));
    }

    private class LaunchCanRegServerActionTask extends org.jdesktop.application.Task<Object, Void> {

        WaitFrame waitFrame;

        LaunchCanRegServerActionTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to LaunchCanRegServerActionTask fields, here.
            super(app);
            // launchServerButton.setEnabled(false);
            feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("LAUNCHING_SERVER..."));
            waitFrame = new WaitFrame();
            waitFrame.setLabel(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("LAUNCHING_SERVER..."));
            waitFrame.setIndeterminate(true);
            desktopPane.add(waitFrame, javax.swing.JLayeredPane.POPUP_LAYER);
            waitFrame.setVisible(true);
            waitFrame.setLocation((desktopPane.getWidth() - waitFrame.getWidth()) / 2, (desktopPane.getHeight() - waitFrame.getHeight()) / 2);
        }

        @Override
        protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here...
            String result = "stopped";
            try {
                if (canreg.common.ServerLauncher.start(serverURLTextField.getText(), codeField.getText(), Integer.parseInt(portField.getText()))) {
                    result = "started";
                } else {
                    // if this fails, does that always mean this is running?
                    result = "running";
                }
            } catch (AlreadyBoundException ex) {
                result = "running";
                Logger.getLogger(LoginInternalFrame.class.getName()).log(Level.INFO, null, ex);
            }
            // Return your result... 
            return result;
        }

        @Override
        protected void succeeded(Object resultObject) {
            waitFrame.dispose();
            String resultString = (String) resultObject;
            if (resultString.equalsIgnoreCase("running")) {
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_ALREADY_RUNNING."));
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_ALREADY_RUNNING."), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("MESSAGE"), JOptionPane.INFORMATION_MESSAGE);
            } else if (resultString.equalsIgnoreCase("stopped")) {
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_FAILED_TO_START."));
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_FAILED_TO_START."), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("MESSAGE"), JOptionPane.ERROR_MESSAGE);
            } else if (resultString != null) {
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_STARTED."));
                CanRegClientApp.getApplication().setCanregServerRunningInThisThread(true);
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_STARTED."), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("MESSAGE"), JOptionPane.INFORMATION_MESSAGE);
                launchServerButton.setEnabled(false);
                singleUserCheckBox.setSelected(false);
                singleUserCheckBox.setEnabled(false);
            } else {
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_FAILED_TO_START."));
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER_FAILED_TO_START."), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private class PerformBackUpActionTask extends org.jdesktop.application.Task<Object, Void> {

        WaitFrame waitFrame;

        PerformBackUpActionTask(org.jdesktop.application.Application app) {
            super(app);
            Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
            setCursor(hourglassCursor);
            feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("PERFORMING_BACKUP..."));
            waitFrame = new WaitFrame();
            waitFrame.setLabel(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("PERFORMING_BACKUP..."));
            waitFrame.setIndeterminate(true);
            desktopPane.add(waitFrame, javax.swing.JLayeredPane.POPUP_LAYER);
            waitFrame.setVisible(true);
            waitFrame.setLocation((desktopPane.getWidth() - waitFrame.getWidth()) / 2, (desktopPane.getHeight() - waitFrame.getHeight()) / 2);
        }

        @Override
        protected Object doInBackground() {
            String result = null;
            try {
                result = CanRegClientApp.getApplication().performBackup();
            } catch (RemoteException ex) {
                Logger.getLogger(LoginInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            return result;
        }

        @Override
        protected void succeeded(Object resultObject) {
            Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
            setCursor(normalCursor);
            waitFrame.dispose();
            String resultString = (String) resultObject;
            if (resultString != null) {
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("BACKUP_PERFORMED."));
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SYSTEM_BACKED_UP_TO_") + resultString + ".", java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("BACKUP_PERFORMED."), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    /**
     * 
     * @return
     */
    @Action
    public boolean testServerConnection() {
        String server = serverURLTextField.getText().trim();
        String port = portField.getText().trim();
        String code = codeField.getText().trim();

        String serverObjectString = "rmi://" + server + ":" + port + "/CanRegLogin" + code;

        String systemName = CanRegClientApp.getApplication().testConnection(serverObjectString);

        if (systemName != null) {
            nameTextField.setText(systemName);
            JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER CONNECTION OK."), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("MESSAGE"), JOptionPane.INFORMATION_MESSAGE);
            return true;
        } else {
            JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("SERVER CONNECTION NOT OK."), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    /**
     * 
     */
    @Action
    public void addServerToList() {
        if (testServerConnection()) {
            localSettings.addServerToServerList(nameTextField.getText(),
                    serverURLTextField.getText(),
                    Integer.parseInt(portField.getText()),
                    codeField.getText());
            canRegSystemComboBox.setModel(new javax.swing.DefaultComboBoxModel(localSettings.getServerDescriptions().toArray()));
        }
    }

    /**
     * 
     */
    @Action
    public void serverComboboxChanged() {
        int selected = canRegSystemComboBox.getSelectedIndex();
        if (selected < 0) {
            selected = 0;
        }
        ServerDescription sd = localSettings.getServerDescriptions().get(selected);
        portField.setText(sd.getPort() + "");
        serverURLTextField.setText(sd.getUrl());
        codeField.setText(sd.getCode());
    }

    /**
     * 
     */
    @Action
    public void getIPaddressAction() {
        try {
            InetAddress addr;
            if (serverURLTextField.getText().equalsIgnoreCase("localhost")) {
                addr = InetAddress.getLocalHost();
            } else {
                addr = InetAddress.getByName(serverURLTextField.getText());
            }
            JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("<HTML>THE IP ADDRESS OF <B>") + addr.getHostName() + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("</B> IS <B>") + addr.getHostAddress() + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("</B>.</HTML>"), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("MESSAGE"), JOptionPane.INFORMATION_MESSAGE);
        } catch (UnknownHostException ex) {
            JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("<HTML>CANNOT FIND THE IP ADDRESS OF <B>") + serverURLTextField.getText() + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("</B>.</HTML>"), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("MESSAGE"), JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(LoginInternalFrame.class.getName()).log(Level.WARNING, null, ex);
        }
    }

    /**
     * 
     */
    @Action
    public void changeShowAdvancedAction() {
        advancedPanel.setVisible(advancedCheckBox.isSelected());
    }

    @Action
    public void singleUserModeToggledAction() {
        if (singleUserCheckBox.isSelected()) {
            autoStartCheckBox.setSelected(false);
            launchServerButton.setEnabled(false);
        } else {
            launchServerButton.setEnabled(true);
        }
    }

    @Action
    public void autoLaunchServerToggled() {
        if (autoStartCheckBox.isSelected()) {
            singleUserCheckBox.setSelected(false);
        }
    }

    /**
     * 
     * @return
     */
    @Action()
    public Task logontoCanRegServerAction() {
        return new LogOnToCanRegServerActionTask(org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class));
    }

    private class LogOnToCanRegServerActionTask extends org.jdesktop.application.Task<Object, Void> {

        String server;
        String port;
        String code;
        String username;
        char[] password;
        String serverObjectString;
        WaitFrame waitFrame;
        boolean loginLocally;
        String canRegSystemName = null;

        LogOnToCanRegServerActionTask(org.jdesktop.application.Application app) {
            super(app);
            server = serverURLTextField.getText().trim();
            port = portField.getText().trim();
            code = codeField.getText().trim();
            username = usernameTextField.getText().trim();
            password = passwordField.getPassword();
            serverObjectString = "rmi://" + server + ":" + port + "/CanRegLogin" + code;
            loginLocally = singleUserCheckBox.isSelected();
            feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("LOGGING_ON_TO_SERVER..."));
            waitFrame = new WaitFrame();
            waitFrame.setLabel(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("LOGGING_ON_TO_SERVER..."));
            waitFrame.setIndeterminate(true);
            desktopPane.add(waitFrame, javax.swing.JLayeredPane.POPUP_LAYER);
            waitFrame.setVisible(true);
            waitFrame.setLocation((desktopPane.getWidth() - waitFrame.getWidth()) / 2, (desktopPane.getHeight() - waitFrame.getHeight()) / 2);
        }

        @Override
        protected Object doInBackground() {
            try {
                if (!loginLocally) {
                    canRegSystemName = CanRegClientApp.getApplication().loginRMI(serverObjectString, username, password);
                } else {
                    // testing an approach to avoid the RMI for single users
                    canRegSystemName = CanRegClientApp.getApplication().loginDirect(code, username, password,/*<ictl.co>*/Integer.parseInt(port)/*</ictl.co<*/);
                }
                return "OK";
            } catch (LoginException loginException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("COULD_NOT_LOG_IN_TO_THE_CANREG_SERVER_ON_") + server + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_WITH_THE_GIVEN_CREDENTIALS.") + "\n" + loginException.getLocalizedMessage(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(loginException.getMessage());
            } catch (NullPointerException nullPointerException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("COULD_NOT_LOG_IN_TO_THE_CANREG_SERVER_ON_") + server + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_WITH_THE_GIVEN_CREDENTIALS.") + "\n" + nullPointerException.getLocalizedMessage(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(nullPointerException.getMessage());
            } catch (NotBoundException notBoundException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("COULD_NOT_LOG_IN_TO_THE_CANREG_SERVER_ON_") + server + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_WITH_THE_GIVEN_CREDENTIALS.") + "\n" + notBoundException.getLocalizedMessage(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(notBoundException.getMessage());
            } catch (MalformedURLException malformedURLException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), "Could not find CanReg server: " + server + "." + "\n" + malformedURLException.getMessage(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(malformedURLException.getMessage());
            } catch (RemoteException remoteException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("COULD_NOT_LOG_IN_TO_THE_CANREG_SERVER_ON_") + server + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_WITH_THE_GIVEN_CREDENTIALS.") + "\n" + remoteException.getLocalizedMessage(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(remoteException.getMessage());
            } catch (UnknownHostException unknownHostException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("COULD_NOT_FIND_CANREG_SERVER:_") + server + "." + "\n" + unknownHostException.getLocalizedMessage(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(unknownHostException.getMessage());
            } catch (WrongCanRegVersionException wrongCanRegVersionException) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("CANREG_SERVER_VERSION_DIFFERENT_THAN_CLIENT_VERSION.") + " " + wrongCanRegVersionException.toString() + ".", java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                debugOut(wrongCanRegVersionException.getMessage());
            }
            return "Failed";
        }

        @Override
        protected void succeeded(Object resultObject) {
            waitFrame.dispose();
            if (canRegSystemName != null) {
                loggedIn(canRegSystemName, server, username);
                // check for locked records
                int recordsLocked = CanRegClientApp.getApplication().getNumberOfRecordsLocked();
                if (recordsLocked > 0) {
                    // "CanReg was not shut down properly - or is already running on this machine. Do you want to clear the list of locked records?"
                    int result = JOptionPane.showConfirmDialog(rootPane, "CanReg was not shut down properly - or this user is already connected to this database from this computer. Do you want to clear the list of locked records?", "Do you want to clear the list of locked records?", JOptionPane.YES_NO_OPTION);
                    if (result == JOptionPane.YES_OPTION) {
                        CanRegClientApp.getApplication().clearListOfLockedRecords();
                    }
                }
            } else {
                feedbackLabel.setText(java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"));
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("COULD_NOT_LOG_IN_TO_THE_CANREG_SERVER_ON_") + server + java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("_WITH_THE_GIVEN_CREDENTIALS.") + "\nPlease make sure you have entered the correct username and password.", java.util.ResourceBundle.getBundle("canreg/client/gui/resources/LoginInternalFrame").getString("ERROR"), JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
