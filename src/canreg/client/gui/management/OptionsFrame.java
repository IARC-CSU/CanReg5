/**
 * CanReg5 - a tool to input, store, check and analyse cancer registry data.
 * Copyright (C) 2008-2015  International Agency for Research on Cancer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Morten Johannes Ervik, CSU/IARC, ervikm@iarc.fr
 */
/*
 * OptionsFrame.java
 *
 * Created on 28 February 2008, 09:34
 */
package canreg.client.gui.management;

import canreg.client.gui.*;
import canreg.client.CanRegClientApp;
import canreg.client.LocalSettings;
import canreg.common.Globals;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import canreg.web.TomcatLauncher;
import org.jdesktop.application.Action;

/**
 *
 * @author  morten
 */
public class OptionsFrame extends javax.swing.JInternalFrame {

    private CanRegClientView crcv;
    private LocalSettings localSettings;
    private Locale[] locales;
    private Properties appInfoProperties;

    /** Creates new form OptionsFrame
     * @param crcv 
     */
    public OptionsFrame(CanRegClientView crcv) {
        try {
            this.crcv = crcv;
            InputStream in = null;
            appInfoProperties = new Properties();
            //
            // load properties file
            //
            // get Application information
            //
            in = getClass().getResourceAsStream(Globals.APPINFO_PROPERTIES_PATH);
            appInfoProperties.load(in);
            in.close();
            initComponents();
            initValues();
        } catch (IOException ex) {
            Logger.getLogger(OptionsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        generalPanel = new javax.swing.JPanel();
        languagePanel = new javax.swing.JPanel();
        languageLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox();
        dateFormatComboBox = new javax.swing.JComboBox();
        languageLabel1 = new javax.swing.JLabel();
        lookAndFeelPanel = new javax.swing.JPanel();
        showOutlineCheckBox = new javax.swing.JCheckBox();
        fontNameLabel = new javax.swing.JLabel();
        fontNameTextField = new javax.swing.JTextField();
        fontSizeComboBox = new javax.swing.JComboBox();
        fontSizeLabel = new javax.swing.JLabel();
        dataEntryLabel = new javax.swing.JLabel();
        dataEntryVersionComboBox = new javax.swing.JComboBox();
        newDataEntryVerticalSources = new javax.swing.JCheckBox();
        systemPanel = new javax.swing.JPanel();
        automaticBackupPanel = new javax.swing.JPanel();
        automaticbackupCheckBox = new javax.swing.JCheckBox();
        everyLabel = new javax.swing.JLabel();
        numberOfDaysTextField = new javax.swing.JTextField();
        daysLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backUpPerformedTextField = new javax.swing.JTextField();
        advancedPanel = new javax.swing.JPanel();
        versionPanel = new javax.swing.JPanel();
        versionInstalledLabel = new javax.swing.JLabel();
        versionInstalledTextField = new javax.swing.JTextField();
        latestVersionLabel = new javax.swing.JLabel();
        latestVersionTextField = new javax.swing.JTextField();
        downloadLatestButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();
        downloadLatestButton1 = new javax.swing.JButton();
        pathsPanel = new javax.swing.JPanel();
        rPanel = new javax.swing.JPanel();
        rInstallationLabel = new javax.swing.JLabel();
        rInstallationTextField = new javax.swing.JTextField();
        rInstallationBrowseButton = new javax.swing.JButton();
        gsPanel = new javax.swing.JPanel();
        gsInstallationLabel = new javax.swing.JLabel();
        gsInstallationTextField = new javax.swing.JTextField();
        gsInstallationBrowseButton = new javax.swing.JButton();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getResourceMap(OptionsFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getActionMap(OptionsFrame.class, this);
        jButton1.setAction(actionMap.get("okAction")); // NOI18N
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("cancelAction")); // NOI18N
        jButton2.setIcon(resourceMap.getIcon("jButton2.icon")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        tabbedPane.setName("tabbedPane"); // NOI18N

        generalPanel.setName("generalPanel"); // NOI18N

        languagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("languagePanel.border.title"))); // NOI18N
        languagePanel.setName("languagePanel"); // NOI18N

        languageLabel.setText(resourceMap.getString("languageLabel.text")); // NOI18N
        languageLabel.setName("languageLabel"); // NOI18N

        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English", "Arabic", "Spanish", "Persian" }));
        languageComboBox.setToolTipText(resourceMap.getString("languageComboBox.toolTipText")); // NOI18N
        languageComboBox.setName("languageComboBox"); // NOI18N

        dateFormatComboBox.setEditable(true);
        dateFormatComboBox.setToolTipText(resourceMap.getString("dateFormatComboBox.toolTipText")); // NOI18N
        dateFormatComboBox.setName("dateFormatComboBox"); // NOI18N
        dateFormatComboBox.setOpaque(false);
        dateFormatComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dateFormatComboBoxMousePressed(evt);
            }
        });

        languageLabel1.setText(resourceMap.getString("languageLabel1.text")); // NOI18N
        languageLabel1.setName("languageLabel1"); // NOI18N

        javax.swing.GroupLayout languagePanelLayout = new javax.swing.GroupLayout(languagePanel);
        languagePanel.setLayout(languagePanelLayout);
        languagePanelLayout.setHorizontalGroup(
            languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(languagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(languageLabel)
                    .addComponent(languageLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateFormatComboBox, 0, 284, Short.MAX_VALUE)
                    .addComponent(languageComboBox, 0, 1, Short.MAX_VALUE))
                .addContainerGap())
        );
        languagePanelLayout.setVerticalGroup(
            languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(languagePanelLayout.createSequentialGroup()
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(languageLabel)
                    .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(languageLabel1))
                .addGap(25, 25, 25))
        );

        lookAndFeelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("lookAndFeelPanel.border.title"))); // NOI18N
        lookAndFeelPanel.setToolTipText(resourceMap.getString("lookAndFeelPanel.toolTipText")); // NOI18N
        lookAndFeelPanel.setName("lookAndFeelPanel"); // NOI18N

        showOutlineCheckBox.setText(resourceMap.getString("showOutlineCheckBox.text")); // NOI18N
        showOutlineCheckBox.setToolTipText(resourceMap.getString("showOutlineCheckBox.toolTipText")); // NOI18N
        showOutlineCheckBox.setName("showOutlineCheckBox"); // NOI18N

        fontNameLabel.setText(resourceMap.getString("fontNameLabel.text")); // NOI18N
        fontNameLabel.setName("fontNameLabel"); // NOI18N

        fontNameTextField.setText(resourceMap.getString("fontNameTextField.text")); // NOI18N
        fontNameTextField.setName("fontNameTextField"); // NOI18N

        fontSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Small", "Medium", "Big" }));
        fontSizeComboBox.setSelectedIndex(1);
        fontSizeComboBox.setToolTipText(resourceMap.getString("fontSizeComboBox.toolTipText")); // NOI18N
        fontSizeComboBox.setName("fontSizeComboBox"); // NOI18N

        fontSizeLabel.setText(resourceMap.getString("fontSizeLabel.text")); // NOI18N
        fontSizeLabel.setName("fontSizeLabel"); // NOI18N

        dataEntryLabel.setText(resourceMap.getString("dataEntryLabel.text")); // NOI18N
        dataEntryLabel.setName("dataEntryLabel"); // NOI18N

        dataEntryVersionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "New Version", "Original Version" }));
        dataEntryVersionComboBox.setName("dataEntryVersionComboBox"); // NOI18N

        newDataEntryVerticalSources.setText(resourceMap.getString("newDataEntryVerticalSources.text")); // NOI18N
        newDataEntryVerticalSources.setToolTipText(resourceMap.getString("newDataEntryVerticalSources.toolTipText")); // NOI18N
        newDataEntryVerticalSources.setName("newDataEntryVerticalSources"); // NOI18N

        javax.swing.GroupLayout lookAndFeelPanelLayout = new javax.swing.GroupLayout(lookAndFeelPanel);
        lookAndFeelPanel.setLayout(lookAndFeelPanelLayout);
        lookAndFeelPanelLayout.setHorizontalGroup(
            lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lookAndFeelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lookAndFeelPanelLayout.createSequentialGroup()
                        .addGroup(lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontNameLabel)
                            .addComponent(fontSizeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontSizeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 361, Short.MAX_VALUE)
                            .addComponent(fontNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(lookAndFeelPanelLayout.createSequentialGroup()
                        .addComponent(showOutlineCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(lookAndFeelPanelLayout.createSequentialGroup()
                        .addComponent(dataEntryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataEntryVersionComboBox, 0, 323, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(newDataEntryVerticalSources, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)))
        );
        lookAndFeelPanelLayout.setVerticalGroup(
            lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lookAndFeelPanelLayout.createSequentialGroup()
                .addGroup(lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontNameLabel)
                    .addComponent(fontNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontSizeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showOutlineCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(lookAndFeelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataEntryLabel)
                    .addComponent(dataEntryVersionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newDataEntryVerticalSources)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout generalPanelLayout = new javax.swing.GroupLayout(generalPanel);
        generalPanel.setLayout(generalPanelLayout);
        generalPanelLayout.setHorizontalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lookAndFeelPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(languagePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        generalPanelLayout.setVerticalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(languagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lookAndFeelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab(resourceMap.getString("generalPanel.TabConstraints.tabTitle"), generalPanel); // NOI18N

        systemPanel.setName("systemPanel"); // NOI18N

        automaticBackupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("automaticBackupPanel.border.title"))); // NOI18N
        automaticBackupPanel.setName("automaticBackupPanel"); // NOI18N

        automaticbackupCheckBox.setSelected(true);
        automaticbackupCheckBox.setText(resourceMap.getString("automaticbackupCheckBox.text")); // NOI18N
        automaticbackupCheckBox.setToolTipText(resourceMap.getString("automaticbackupCheckBox.toolTipText")); // NOI18N
        automaticbackupCheckBox.setName("automaticbackupCheckBox"); // NOI18N

        everyLabel.setText(resourceMap.getString("everyLabel.text")); // NOI18N
        everyLabel.setName("everyLabel"); // NOI18N

        numberOfDaysTextField.setText(resourceMap.getString("numberOfDaysTextField.text")); // NOI18N
        numberOfDaysTextField.setName("numberOfDaysTextField"); // NOI18N

        daysLabel.setText(resourceMap.getString("daysLabel.text")); // NOI18N
        daysLabel.setName("daysLabel"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        backUpPerformedTextField.setEditable(false);
        backUpPerformedTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        backUpPerformedTextField.setText(resourceMap.getString("backUpPerformedTextField.text")); // NOI18N
        backUpPerformedTextField.setFocusable(false);
        backUpPerformedTextField.setName("backUpPerformedTextField"); // NOI18N

        javax.swing.GroupLayout automaticBackupPanelLayout = new javax.swing.GroupLayout(automaticBackupPanel);
        automaticBackupPanel.setLayout(automaticBackupPanelLayout);
        automaticBackupPanelLayout.setHorizontalGroup(
            automaticBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(automaticBackupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(automaticBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(automaticBackupPanelLayout.createSequentialGroup()
                        .addComponent(automaticbackupCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 199, Short.MAX_VALUE))
                    .addGroup(automaticBackupPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(automaticBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(automaticBackupPanelLayout.createSequentialGroup()
                        .addComponent(everyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfDaysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(daysLabel))
                    .addComponent(backUpPerformedTextField)))
        );
        automaticBackupPanelLayout.setVerticalGroup(
            automaticBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(automaticBackupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(automaticBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(automaticbackupCheckBox)
                    .addComponent(numberOfDaysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(daysLabel)
                    .addComponent(everyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(automaticBackupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backUpPerformedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout systemPanelLayout = new javax.swing.GroupLayout(systemPanel);
        systemPanel.setLayout(systemPanelLayout);
        systemPanelLayout.setHorizontalGroup(
            systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(automaticBackupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        systemPanelLayout.setVerticalGroup(
            systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(automaticBackupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(172, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("systemPanel.TabConstraints.tabTitle"), systemPanel); // NOI18N

        advancedPanel.setName("advancedPanel"); // NOI18N

        versionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("versionPanel.border.title"))); // NOI18N
        versionPanel.setName("versionPanel"); // NOI18N

        versionInstalledLabel.setText(resourceMap.getString("versionInstalledLabel.text")); // NOI18N
        versionInstalledLabel.setName("versionInstalledLabel"); // NOI18N

        versionInstalledTextField.setEditable(false);
        versionInstalledTextField.setText(resourceMap.getString("versionInstalledTextField.text")); // NOI18N
        versionInstalledTextField.setToolTipText(resourceMap.getString("versionInstalledTextField.toolTipText")); // NOI18N
        versionInstalledTextField.setName("versionInstalledTextField"); // NOI18N

        latestVersionLabel.setText(resourceMap.getString("latestVersionLabel.text")); // NOI18N
        latestVersionLabel.setName("latestVersionLabel"); // NOI18N

        latestVersionTextField.setEditable(false);
        latestVersionTextField.setText(resourceMap.getString("latestVersionTextField.text")); // NOI18N
        latestVersionTextField.setToolTipText(resourceMap.getString("latestVersionTextField.toolTipText")); // NOI18N
        latestVersionTextField.setEnabled(false);
        latestVersionTextField.setName("latestVersionTextField"); // NOI18N

        downloadLatestButton.setAction(actionMap.get("downloadLatestVersionAction")); // NOI18N
        downloadLatestButton.setForeground(resourceMap.getColor("downloadLatestButton.foreground")); // NOI18N
        downloadLatestButton.setToolTipText(resourceMap.getString("downloadLatestButton.toolTipText")); // NOI18N
        downloadLatestButton.setBorder(null);
        downloadLatestButton.setBorderPainted(false);
        downloadLatestButton.setContentAreaFilled(false);
        downloadLatestButton.setName("downloadLatestButton"); // NOI18N

        checkButton.setAction(actionMap.get("checkLatestVersionAction")); // NOI18N
        checkButton.setText(resourceMap.getString("checkButton.text")); // NOI18N
        checkButton.setToolTipText(resourceMap.getString("checkButton.toolTipText")); // NOI18N
        checkButton.setName("checkButton"); // NOI18N

        downloadLatestButton1.setAction(actionMap.get("viewChangeLogAction")); // NOI18N
        downloadLatestButton1.setForeground(resourceMap.getColor("downloadLatestButton1.foreground")); // NOI18N
        downloadLatestButton1.setText(resourceMap.getString("downloadLatestButton1.text")); // NOI18N
        downloadLatestButton1.setToolTipText(resourceMap.getString("downloadLatestButton1.toolTipText")); // NOI18N
        downloadLatestButton1.setBorder(null);
        downloadLatestButton1.setBorderPainted(false);
        downloadLatestButton1.setContentAreaFilled(false);
        downloadLatestButton1.setName("downloadLatestButton1"); // NOI18N

        javax.swing.GroupLayout versionPanelLayout = new javax.swing.GroupLayout(versionPanel);
        versionPanel.setLayout(versionPanelLayout);
        versionPanelLayout.setHorizontalGroup(
            versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(versionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(latestVersionLabel)
                    .addComponent(versionInstalledLabel))
                .addGap(8, 8, 8)
                .addGroup(versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(versionPanelLayout.createSequentialGroup()
                        .addComponent(downloadLatestButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(downloadLatestButton1))
                    .addComponent(latestVersionTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addComponent(versionInstalledTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkButton))
        );
        versionPanelLayout.setVerticalGroup(
            versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(versionPanelLayout.createSequentialGroup()
                .addGroup(versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionInstalledLabel)
                    .addComponent(versionInstalledTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(latestVersionLabel)
                    .addComponent(checkButton)
                    .addComponent(latestVersionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(versionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downloadLatestButton)
                    .addComponent(downloadLatestButton1)))
        );

        javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);
        advancedPanel.setLayout(advancedPanelLayout);
        advancedPanelLayout.setHorizontalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advancedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(versionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        advancedPanelLayout.setVerticalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(versionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("advancedPanel.TabConstraints.tabTitle"), advancedPanel); // NOI18N

        pathsPanel.setName("pathsPanel"); // NOI18N

        rPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("rPanel.border.title"))); // NOI18N
        rPanel.setName("rPanel"); // NOI18N

        rInstallationLabel.setText(resourceMap.getString("rInstallationLabel.text")); // NOI18N
        rInstallationLabel.setName("rInstallationLabel"); // NOI18N

        rInstallationTextField.setText(resourceMap.getString("rInstallationTextField.text")); // NOI18N
        rInstallationTextField.setToolTipText(resourceMap.getString("rInstallationTextField.toolTipText")); // NOI18N
        rInstallationTextField.setName("rInstallationTextField"); // NOI18N

        rInstallationBrowseButton.setAction(actionMap.get("browseForR")); // NOI18N
        rInstallationBrowseButton.setText(resourceMap.getString("rInstallationBrowseButton.text")); // NOI18N
        rInstallationBrowseButton.setName("rInstallationBrowseButton"); // NOI18N

        javax.swing.GroupLayout rPanelLayout = new javax.swing.GroupLayout(rPanel);
        rPanel.setLayout(rPanelLayout);
        rPanelLayout.setHorizontalGroup(
            rPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rPanelLayout.createSequentialGroup()
                .addComponent(rInstallationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rInstallationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rInstallationBrowseButton)
                .addContainerGap())
        );
        rPanelLayout.setVerticalGroup(
            rPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rInstallationLabel)
                .addComponent(rInstallationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rInstallationBrowseButton))
        );

        gsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("gsPanel.border.title"))); // NOI18N
        gsPanel.setName("gsPanel"); // NOI18N

        gsInstallationLabel.setText(resourceMap.getString("gsInstallationLabel.text")); // NOI18N
        gsInstallationLabel.setName("gsInstallationLabel"); // NOI18N

        gsInstallationTextField.setToolTipText(resourceMap.getString("gsInstallationTextField.toolTipText")); // NOI18N
        gsInstallationTextField.setName("gsInstallationTextField"); // NOI18N

        gsInstallationBrowseButton.setAction(actionMap.get("browseForGS")); // NOI18N
        gsInstallationBrowseButton.setName("gsInstallationBrowseButton"); // NOI18N

        javax.swing.GroupLayout gsPanelLayout = new javax.swing.GroupLayout(gsPanel);
        gsPanel.setLayout(gsPanelLayout);
        gsPanelLayout.setHorizontalGroup(
            gsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gsPanelLayout.createSequentialGroup()
                .addComponent(gsInstallationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gsInstallationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gsInstallationBrowseButton)
                .addContainerGap())
        );
        gsPanelLayout.setVerticalGroup(
            gsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(gsInstallationLabel)
                .addComponent(gsInstallationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(gsInstallationBrowseButton))
        );

        javax.swing.GroupLayout pathsPanelLayout = new javax.swing.GroupLayout(pathsPanel);
        pathsPanel.setLayout(pathsPanelLayout);
        pathsPanelLayout.setHorizontalGroup(
            pathsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pathsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pathsPanelLayout.setVerticalGroup(
            pathsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        tabbedPane.addTab(resourceMap.getString("pathsPanel.TabConstraints.tabTitle"), pathsPanel); // NOI18N
//<ictl.co>
        webPanel = new javax.swing.JPanel();
        serverPortLabel = new javax.swing.JLabel();
        serverPortTextField = new javax.swing.JTextField();
        serverLanuchButton = new javax.swing.JButton();
        serverPanel = new javax.swing.JPanel();

        webPanel.setName("webPanel"); //NOI18N

        serverPortLabel.setText(resourceMap.getString("serverPortLabel.text")); // NOI18N
        serverPortLabel.setName("serverPortLabel"); // NOI18N

        serverPortTextField.setText(resourceMap.getString("serverPortTextField.text")); // NOI18N
        serverPortTextField.setToolTipText(resourceMap.getString("serverPortTextField.toolTipText")); // NOI18N
        serverPortTextField.setName("serverPortTextField"); // NOI18N

        serverLanuchButton.setAction(actionMap.get("serverLaunch")); // NOI18N
        serverLanuchButton.setText(resourceMap.getString("serverLaunchButton.text")); // NOI18N
        serverLanuchButton.setName("serverLaunchButton"); // NOI18N

        serverPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("serverPanel.border.title"))); // NOI18N
        serverPanel.setName("serverPanel"); // NOI18N
        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);

        serverPanelLayout.setHorizontalGroup(
                serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(serverPanelLayout.createSequentialGroup()
                                .addComponent(serverPortLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverPortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverLanuchButton)
                                .addContainerGap())
        );
        serverPanelLayout.setVerticalGroup(
                serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(serverPortLabel)
                                .addComponent(serverPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(serverLanuchButton))
        );


        javax.swing.GroupLayout webPanelLayout = new javax.swing.GroupLayout(webPanel);
        webPanel.setLayout(webPanelLayout);
        webPanelLayout.setHorizontalGroup(
                webPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(webPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(webPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(serverPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        webPanelLayout.setVerticalGroup(
                webPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(webPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(serverPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        )
        );

        tabbedPane.addTab(resourceMap.getString("web.TabConstraints.tabTitle"), webPanel); // NOI18N
        //</ictl.co>
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dateFormatComboBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateFormatComboBoxMousePressed

        // TODO add your handling code here:}//GEN-LAST:event_dateFormatComboBoxMousePressed
    }
    /**
     * 
     */
    @Action
    public void cancelAction() {
        this.dispose();
    }

    /**
     * 
     */
    @Action
    public void okAction() {
        // First test filds that can be tested
        if (valuesOK()) {
            // store all info
            saveValues();
            // apply new settings
            crcv.applyPreferences();
            //and close
            this.dispose();
        } else {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JPanel automaticBackupPanel;
    private javax.swing.JCheckBox automaticbackupCheckBox;
    private javax.swing.JTextField backUpPerformedTextField;
    private javax.swing.JButton checkButton;
    private javax.swing.JLabel dataEntryLabel;
    private javax.swing.JComboBox dataEntryVersionComboBox;
    private javax.swing.JComboBox dateFormatComboBox;
    private javax.swing.JLabel daysLabel;
    private javax.swing.JButton downloadLatestButton;
    private javax.swing.JButton downloadLatestButton1;
    private javax.swing.JLabel everyLabel;
    private javax.swing.JLabel fontNameLabel;
    private javax.swing.JTextField fontNameTextField;
    private javax.swing.JComboBox fontSizeComboBox;
    private javax.swing.JLabel fontSizeLabel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JButton gsInstallationBrowseButton;
    private javax.swing.JLabel gsInstallationLabel;
    private javax.swing.JTextField gsInstallationTextField;
    private javax.swing.JPanel gsPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox languageComboBox;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JLabel languageLabel1;
    private javax.swing.JPanel languagePanel;
    private javax.swing.JLabel latestVersionLabel;
    private javax.swing.JTextField latestVersionTextField;
    private javax.swing.JPanel lookAndFeelPanel;
    private javax.swing.JCheckBox newDataEntryVerticalSources;
    private javax.swing.JTextField numberOfDaysTextField;
    private javax.swing.JPanel pathsPanel;
    //<ictl.co>
    private javax.swing.JPanel webPanel;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JTextField serverPortTextField;
    private javax.swing.JButton serverLanuchButton;
    //</ictl.co>
    private javax.swing.JButton rInstallationBrowseButton;
    private javax.swing.JLabel rInstallationLabel;
    private javax.swing.JTextField rInstallationTextField;
    private javax.swing.JPanel rPanel;
    private javax.swing.JCheckBox showOutlineCheckBox;
    private javax.swing.JPanel systemPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel versionInstalledLabel;
    private javax.swing.JTextField versionInstalledTextField;
    private javax.swing.JPanel versionPanel;
    // End of variables declaration//GEN-END:variables

    private void initValues() {
        localSettings = CanRegClientApp.getApplication().getLocalSettings();
        // Languages
        locales = Locale.getAvailableLocales();
        //<ictl.co>
        List<Locale> tmp = new ArrayList<Locale>(Arrays.asList(locales));
        tmp.add(new Locale("fa", "IR"));
        locales = tmp.toArray(new Locale[0]);
        //</ictl.co>

        Arrays.sort(locales, new Comparator<Locale>() {

            @Override
            public int compare(Locale o1, Locale o2) {
                return o1.getDisplayName(o1).compareToIgnoreCase(o2.getDisplayName(o2));
            }
        });
        String[] localeNames = new String[locales.length];
        Locale currentLocale = localSettings.getLocale();
        int currentLocaleIndex = 0;
        int numberOfElementsAdded = 0;
        LinkedList localesList = new LinkedList();
        LinkedList localesNamesList = new LinkedList();

        List<String> translatedLocales = Arrays.asList(Globals.TRANSLATED_LOCALES);

        for (int i = 0; i < locales.length; i++) {
            // String country = locales[i].getDisplayCountry(locales[i]);
            localeNames[i] = locales[i].getDisplayName(locales[i]);

            if (translatedLocales.contains(locales[i].toString())) {
                if (locales[i].toString().equalsIgnoreCase(currentLocale.toString())) {
                    currentLocaleIndex = numberOfElementsAdded;
                }
                localesList.add(locales[i]);
                localesNamesList.add(locales[i].getDisplayName(locales[i]));
                numberOfElementsAdded++;
            }
        }
        locales = (Locale[]) localesList.toArray(locales);
        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel(localesNamesList.toArray()));
        languageComboBox.setSelectedIndex(currentLocaleIndex);
        //<ictl.co>
        languageComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "To make changes effect please restart CanReg5.");
            }
        });
        //<ictl.co>

        showOutlineCheckBox.setSelected(localSettings.isOutlineDragMode());
        // CanReg verison
        String versionString = "";
        for (String part : Globals.versionStringParts) {
            versionString += appInfoProperties.getProperty(part);
        }
        versionInstalledTextField.setText(versionString);
        try {
            // Backup
            Date backUpDate = CanRegClientApp.getApplication().getDateOfLastBackUp();
            if (backUpDate != null) {
                backUpPerformedTextField.setText(DateFormat.getDateInstance().format(backUpDate));
            }
        } catch (SecurityException ex) {
            Logger.getLogger(OptionsFrame.class.getName()).log(Level.INFO, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(OptionsFrame.class.getName()).log(Level.INFO, null, ex);
        }
        String backUpEvery = localSettings.getProperty(LocalSettings.BACKUP_EVERY_KEY);

        numberOfDaysTextField.setText(backUpEvery);
        automaticbackupCheckBox.setSelected(localSettings.isAutoBackup());

        String rPath = localSettings.getProperty(LocalSettings.R_PATH);
        rInstallationTextField.setText(rPath);

        String gsPath = localSettings.getProperty(LocalSettings.GS_PATH);
        gsInstallationTextField.setText(gsPath);

        String fontName = localSettings.getProperty(LocalSettings.FONT_NAME_KEY);
        if (fontName == null || fontName.length() == 0) {
            fontName = LocalSettings.FONT_NAME_DEFAULT;
        }
        fontNameTextField.setText(fontName);

        String fontSize = localSettings.getProperty(LocalSettings.FONT_SIZE_KEY);
        fontSizeComboBox.setSelectedItem(fontSize);
        
        for(String df : Globals.DATE_FORMAT_STRINGS_ARRAY) {
            dateFormatComboBox.addItem(df);
        }
        dateFormatComboBox.setSelectedItem(localSettings.getDateFormatString());
        
        newDataEntryVerticalSources.setSelected(localSettings.isDataEntryVerticalSources());
        String dataEntryVersion = localSettings.getProperty(LocalSettings.DATA_ENTRY_VERSION_KEY);
        dataEntryVersionComboBox.setSelectedItem(dataEntryVersion);

        //<ictl.co>
        serverPortTextField.setText(localSettings.getProperty("webserver.port"));
        //</ictl.co>

    }

    private String getNewestVersionNumber() {
        String latestVersionString = canreg.common.Tools.getFileFromURL(Globals.newestVersionURLString);
        return latestVersionString;
    }

    private boolean valuesOK() {
        boolean valuesOK = true;
        if (automaticbackupCheckBox.isSelected()) {
            try {
                int numberOfDays = Integer.parseInt(numberOfDaysTextField.getText());
                if (numberOfDays < 1) {
                    JOptionPane.showInternalMessageDialog(
                            CanRegClientApp.getApplication().getMainFrame().getContentPane(),
                            java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("NUMBER_TOO_LOW."),
                            java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("ERROR_IN_AUTOMATIC_BACKUP_OPTIONS."), JOptionPane.ERROR_MESSAGE);
                    valuesOK = false;
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showInternalMessageDialog(
                        CanRegClientApp.getApplication().getMainFrame().getContentPane(),
                        numberOfDaysTextField.getText() + " " + java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("IS_NOT_A_NUMBER."),
                        java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("ERROR_IN_AUTOMATIC_BACKUP_OPTIONS."), JOptionPane.ERROR_MESSAGE);
                valuesOK = false;
            }
        }
        return valuesOK;
    }

    private void saveValues() {
        // save values
        // localSettings.setLocale(Globals.LANGUAGES_AVAILABLE[languageComboBox.getSelectedIndex()]);
        localSettings.setLocale(locales[languageComboBox.getSelectedIndex()].toString());

        if (showOutlineCheckBox.isSelected()) {
            localSettings.setOutlineDragMode(true);
        } else {
            localSettings.setOutlineDragMode(false);
        }

        if (automaticbackupCheckBox.isSelected()) {
            localSettings.setAutomaticBackup(true);
            localSettings.setProperty(LocalSettings.BACKUP_EVERY_KEY, numberOfDaysTextField.getText());
        } else {
            localSettings.setAutomaticBackup(false);
        }
        localSettings.setProperty(LocalSettings.R_PATH, rInstallationTextField.getText());
        localSettings.setProperty(LocalSettings.GS_PATH, gsInstallationTextField.getText());

        localSettings.setProperty(LocalSettings.FONT_NAME_KEY, fontNameTextField.getText());
        localSettings.setProperty(LocalSettings.FONT_SIZE_KEY, fontSizeComboBox.getSelectedItem().toString());

        localSettings.setProperty(LocalSettings.DATE_FORMAT_KEY, dateFormatComboBox.getSelectedItem().toString());

        localSettings.setProperty(LocalSettings.DATA_ENTRY_VERSION_KEY, dataEntryVersionComboBox.getSelectedItem().toString());
        if (newDataEntryVerticalSources.isSelected()) {
            localSettings.setDataEntryVerticalSources(true);
        } else {
            localSettings.setDataEntryVerticalSources(false);
        }
        
        // write settings to file
        localSettings.writeSettings();
    }

    /**
     * 
     */
    @Action
    public void downloadLatestVersionAction() {
        try {
            canreg.common.Tools.browse(Globals.downloadCanRegURL);
        } catch (IOException ex) {
            Logger.getLogger(OptionsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * 
     */
    @Action
    public void checkLatestVersionAction() {
        String lv = getNewestVersionNumber();
        if (lv != null && lv.trim().length() > 0) {
            latestVersionTextField.setText(lv);
            latestVersionTextField.setEnabled(true);
            if (!lv.trim().equalsIgnoreCase(versionInstalledTextField.getText())) {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("NOT_THE_LATEST_VERSION_INSTALLED"), java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("MESSAGE"), JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("LATEST_VERSION_INSTALLED."), java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("MESSAGE"), JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showInternalMessageDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("NO_INFORMATION"), java.util.ResourceBundle.getBundle("canreg/client/gui/management/resources/OptionsFrame").getString("MESSAGE"), JOptionPane.ERROR_MESSAGE);
        }
    }

    @Action
    public void browseForR() {
        String path = "";
        if (rInstallationTextField.getText().trim().length() > 0) {
            path = rInstallationTextField.getText();
        }
        JFileChooser chooser = new JFileChooser(path);
        int choice = chooser.showDialog(jLabel2, "OK");
        if (choice == JFileChooser.APPROVE_OPTION && chooser.getSelectedFile() != null) {
            rInstallationTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }

    @Action
    public void viewChangeLogAction() {
        crcv.showChangeLog();
    }

    @Action
    public void browseForGS() {
        String path = "";
        if (gsInstallationTextField.getText().trim().length() > 0) {
            path = gsInstallationTextField.getText();
        }
        JFileChooser chooser = new JFileChooser(path);
        int choice = chooser.showDialog(jLabel2, "OK");
        if (choice == JFileChooser.APPROVE_OPTION && chooser.getSelectedFile() != null) {
            gsInstallationTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }

    //<ictl.co>
    @Action
    public void serverLaunch() {
        int webPort = 0;
        try {
            webPort = Integer.parseInt(serverPortTextField.getText());
            localSettings.setProperty("webserver.port", serverPortTextField.getText());
            TomcatLauncher.launch(webPort);
            JOptionPane.showMessageDialog(null, "Web Server Started Successfully.");
            canreg.common.Tools.browse("http://localhost:" + serverPortTextField.getText());
        } catch (NumberFormatException nfe) {
            Logger.getLogger(OptionsFrame.class.getName()).log(Level.SEVERE, null, nfe);
            JOptionPane.showMessageDialog(null, "Invalid Port number.");
        } catch (IOException e) {
            Logger.getLogger(OptionsFrame.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    //</ictl.co>
}
